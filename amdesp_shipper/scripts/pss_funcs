
Sub Form_OnClick(ControlId)
    Select Case ControlId

        Case "CommandButton3"
            if MsgBox("Launch AmDesp to ship sale?",4) =6 Then
                AmDesp("prod")
            End if
        Case "CommandButton4"
            if MsgBox("Launch Amdesp to track shipment?",4) = 6 Then
                AmDesp("track")
            end if
        Case "CommandButton5"
            if MsgBox("Launch Amdesp to create a return from the delivery address??",4) = 6 Then
                AmDesp("create_return")
            end if
    End Select

End Sub

'****************  pss-sub ***********************'



Sub AmDesp(mode)
        ' AmDesp'

        Dim locAmDesp, exeAmDesp, objShell, strCommand, objFSO, locXml
        Set objFSO = CreateObject("Scripting.FileSystemObject")

        locAmDesp = "C:\AmDesp\"
        exeAmDesp = objFSO.BuildPath(locAmDesp, "AmDesp.exe")
        locXml = "C:\AmDesp\data\AmShip.xml"
        ExportItemDetailForm(locXml)

        strCommand = exeAmDesp & " " & mode & " " & locXml
        Set objShell = CreateObject("Wscript.Shell")
        objShell.CurrentDirectory = locAmDesp

        objShell.run "%comspec% /c " & strCommand,1,false ' 1= activate window false = don't wait
        set objShell = nothing
End Sub

'**************** arno+ pss function to export item fields to xml  ***********'

Sub ExportItemDetailForm(ByVal strPath)

    Const CMC_DELIM = "<<%||%>>" 'string to delimit the retrieved data. Use any string you want, but make sure it is unlikely it may represent a name/value of a category or field
    Const CMC_DELIM2 = "@#$%%$#@" 'string for secondary delimiter for use in parsing connections

    Dim db, conv, f, arrFields, arrCons, strDDE
    Set db = Application.Database
    Set conv = db.GetConversation("Commence", "GetData")
    strDDE = "[GetFieldNames(" & dq(Form.CategoryName) & "," & dq(CMC_DELIM) & ")]"
    arrFields = Split(conv.Request(strDDE), CMC_DELIM)
    Dim xmlDoc : Set xmlDoc = CreateObject("Msxml2.DOMDocument.6.0")
    xmlDoc.async = false
    xmlDoc.loadXML("<root><ItemDetailForm/></root>") ' make root/itemdetailform'

    Dim el
    Dim objRoot : Set objRoot = xmlDoc.DocumentElement

    Set el = xmlDoc.createElement("CategoryName")   ' create Root/itemdetailform/CategoryName'
    el.text = sanitizeXMLString(Form.CategoryName)
    objRoot.childNodes.item(0).appendChild(el)
    Set el = xmlDoc.createElement("FormName")       ' create Root/itemdetailform/FormName'
    el.text = sanitizeXMLString(Form.Name)
    objRoot.childNodes.item(0).appendChild(el)
    Set el = xmlDoc.createElement("Fields")         ' create Root/itemdetailform/Fields'
    Dim fnode : Set fnode = objRoot.childNodes.item(0).appendChild(el)



    Dim i
    For i = 0 To UBound(arrFields) - 1
        ' the idea is that if we cannot instatiate a field,
        ' it isn't on the form, so we need to catch the errors
        On Error Resume Next
        Set f = Form.Field(arrFields(i))
        On Error Goto 0
        ' add to xml doc
        Set el = xmlDoc.createElement("Field")
        Dim n : Set n = fnode.appendChild(el) 'get reference to node
        Set el = xmlDoc.createElement("FieldName")
        el.text = sanitizeXMLString(f.Name)
        n.appendChild(el)
        Set el = xmlDoc.createElement("FieldValue")
        el.text = sanitizeXMLString(f.Value)
    n.appendChild(el)
    Next
    ' process customer connections
    strDDE = "[GetConnectionNames(" & dq(Form.CategoryName) & "," & dq(CMC_DELIM) & "," & dq(CMC_DELIM2) & ")]"
    arrCons = Split(conv.Request(strDDE), CMC_DELIM)
    Dim connect, CustomerName
    Set connect = Form.Connection("To", "Customer") ' customer connection please'


    Set el = xmlDoc.createElement("Customer")       ' create Root/itemdetailform/Customer' ' DOES NOT WORK' #debug
    Dim nodeCustomer : Set nodeCustomer = objRoot.childNodes.item(0).appendChild(el) ' node parent is root'
    el.text = sanitizeXMLString(connect.ItemName)
    Set el = xmlDoc.createElement("ToCategory")
    xmlDoc.Save strPath


    Set xmlDoc = Nothing
    Set conv= Nothing
    Set db = Nothing
    Set el = Nothing
    Set connect = Nothing
    Set nodeCustomer = Nothing
    Set objRoot = Nothing
    Set fnode = Nothing
    Set f = Nothing
    Set n = Nothing
    Set connect = Nothing


End Sub


public Function sanitizeXMLString(invalidString)
' used to cleanup strings which interfere with xml format - AmDesp python reverses this'
	Dim tmp, i
	tmp = invalidString
	'first replace ampersand
	tmp = Replace(tmp, chr(38), "&amp;")
	'then the other special characters
	For i = 160 to 255
		tmp = Replace(tmp, chr(i), "&#" & i & ";")
	Next
	'and then the special characters
	tmp = Replace(tmp, chr(34), "&quot;")
	tmp = Replace(tmp, chr(39), "&apos;")
	tmp = Replace(tmp, chr(60), "&lt;")
	tmp = Replace(tmp, chr(62), "&gt;")
	'tmp = Replace(tmp, chr(32), "&nbsp;") ' (space)'
	sanitizeXMLString = tmp
end function

Function dq(s)

  dq = Chr(34) & s & Chr(34)

End Function