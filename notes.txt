
Buttons:
packed
unpacked all ok
ship this hire
ship this customer
ship all ShipMe


running notes:
commence backups in office - how often? make more often while dev!



TODO:
ask user for dimensions or keep using placeholder?
CLI functions:
    check collections / labels
    get / print labels
    cancel collection / delete label
    track shipments by customer / date / order

VBS:
todo: button("ship all shipMe") -> confirmation dialgoue lists included hires  -> if confirmed: do smth







*********************
python kwargs from cli
--------------------------------
import sys

def main(foo, bar, **kwargs):
    print('Called myscript with:')
    print('foo = {}'.format(foo))
    print('bar = {}'.format(bar))
    for k, v in kwargs.items():
        print('keyword argument: {} = {}'.format(k, v))

if __name__=='__main__':
    main(sys.argv[1], # foo
         sys.argv[2], # bar
         **dict(arg.split('=') for arg in sys.argv[3:])) # kwargs

# Example use:
# $ python myscript.py foo bar hello=world 'with spaces'='a value'
# Called myscript with:
# foo = foo
# bar = bar
# keyword argument: hello = world
# keyword argument: with spaces = a value
*********************


3RD PARTY HYTERA CODE:
https://github.com/hexagonal-sun/hyrps
https://github.com/2E0RPT

LEARN
Make Installer

QUERIES:
DB - manual doesn't require parcel dimensions, API does.... how to avoid giving fake info?

In Python 3.8+, you can use assignment expressions (operator :=):
if (x := 3) == 5:
    print("that's odd")

        # object = dates[date_choice]
        # object_methods = [method_name for method_name in dir(object)
        #                  if callable(getattr(object, method_name))]
        # pprint(object_methods)


backup / unused despatchbay funcs:
# account_return = client.get_account()
# print(account_return)

# services_return = client.get_services() 
# print(services_return)
#
# account_balance = client.get_account_balance()
# print(account_balance)
#
# sender_addresses = client.get_sender_addresses()
# print(sender_addresses)
#
# payment_methods = client.get_payment_methods()
# print(payment_methods)

# automatic_topup_enabled = client.enable_automatic_topups(
#     '100', payment_methods[0].payment_method_id, payment_methods[0].payment_method_id)
# print(automatic_topup_enabled)

# automatic_topup_disabled = client.disable_automatic_topups()
# print(automatic_topup_disabled)

